 (1) The number of states, say N.?For ease of implementation, number states from 0 to N-1, with 0 representing the initial state, and N the dead-end state. (2) The set of final states.?You need a boolean array FINAL [0..N-1]. (3) The alphabet.?Symbols in the alphabet should be numbered internally so that the value returned by the function getNextSymbol is an integer. (4) A sequence of transitions of the form (p a q).?The triple (p a q) means that in state p, looking at input symbol a, the FSA will change its state to q. For this project, store this information in a table, say next_state, so that the value returned by the function getNextState is next_state [state, symbol]. Test your program with the following 5 finite state automata using the given test strings. (1) A FSA which recognizes the set of all binary strings with at most one pair of consecutive 0Õs and at most one pair of consecutive 1Õs. Strings: ?, 00, 0011, 110011, 010101, 000, 00102, 1100101, 10110100101, 1001011010110 (2) A FSA which recognizes email addresses. A valid email address is defined as follows: userName@serverName.domainName, where the user name consists of at least one symbol with any combination of letters, digits, hyphens, underscores, or periods. The server name is any string of at least one symbol with any combination of letters, digits, hyphens, and underscores. The domain name must have 2 to 4 letters. Strings: a.b.c@d.w3c, jsmith, jsmith@olympus, jsmith@olympus.gov, _jsmith-example.olympus@states.us, jsmith.edu, john@mail.office, ComputerScienceDepartment@csupomona.edu, jsmith@LA.cnn.com, SMITH@bookStore.Peru (3) A FSA which recognizes all identifiers that begin with a letter (both upper and lower), an underscore, or a dollar sign, followed by any combination of letters, digits, underscores, and dollar signs. Strings: a, $, _, TAX_RATE, $amount, week day, 3dGraph, X3y7, _finite_automaton, X*Y (4) A FSA which recognizes the set of all signed or unsigned decimal numbers without superfluous leading or trailing zeros. For instance, 0.0, -0.5, +120.01, and 123000.0 are in the language, but 0.00, 00.5, and 0123.4 are not. Each decimal number has the form of A.B, where A and B are strings of digits and they cannot be empty at the same time. Strings: +1.23, -.123, 123., -0.0, 01234.5, +789, ., 56.30, +120.0001, 123000.0 (5) A FSA which recognizes the set of strings over {0, 1, 2} such that the final digit has not appeared before. Strings: 0, 01, 012, 22, 2102, 0221, 01012, 120120, 110221210, 0202321  